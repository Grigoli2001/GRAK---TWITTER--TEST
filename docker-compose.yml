version: '3.8'
services:
  mongo1:
    image: mongo:latest
    container_name: mongo1
    restart: always
    hostname: mongo1
    ports:
      - 27017:27017
    command: --replSet rs0 --bind_ip_all --port 27017
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'mongo1:27017'}]}) }" | mongosh --port 27017 
      interval: 5s
      timeout: 15s
      start_period: 15s
      retries: 10
    volumes:
      - ./mongo1_data:/data/db
      - ./mongo1_config:/data/configdb

  mongo2:
    image: mongo:latest
    container_name: mongo2
    restart: always
    hostname: mongo2
    ports:
      - 27018:27018
    command: --replSet rs0 --bind_ip_all --port 27018
    volumes:
      - ./mongo2_data:/data/db
      - ./mongo2_config:/data/configdb

  redis:
    container_name: redis
    image: redis/redis-stack:latest
    ports:
      - '6379:6379'
    volumes:
      - ./data:/data

  neo4j:
    container_name: neo4j
    image: neo4j:latest
    ports:
      - 7687:7687
    volumes:
      - ./neo4j_db/data:/data
      - ./neo4j_db/logs:/logs
      - ./neo4j_db/import:/var/lib/neo4j/import
      - ./neo4j_db/plugins:/plugins

  backend:
    container_name: backend
    build: ./back
    env_file:
      - path: ./back/.env.production.local
        required: true
    ports:
      - '8080:8080'
    volumes:
      - ./back:/app
      - /app/node_modules
      - /app/logs
    depends_on:
      - mongo1
      - mongo2
      - redis
      - neo4j

  frontend:
    container_name: frontend
    build: ./front
    ports:
      - '3000:3000'
    volumes:
      - ./front:/app
      - /app/node_modules
    depends_on:
      - backend

volumes:
  data:
  mongo1_data:
  mongo1_config:
  mongo2_data:
  mongo2_config:
